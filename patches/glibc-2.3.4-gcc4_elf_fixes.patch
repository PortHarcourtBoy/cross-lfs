Submitted By: Ryan Oliver <ryan.oliver@pha.com.au> 
Date: 2005-05-03 (updated 2005-06-03)
Initial Package Version: 2.3.4
Origin: glibc cvs
        libc/elf/dynamic-link.h -r1.54
        libc/sysdeps/alpha/dl-machine.h -r1.81
        libc/sysdeps/arm/dl-machine.h
         - fix_bad_pc24 fix from Dan Kegel's crosstool
         - remainder from -r1.52
        libc/sysdeps/generic/dl-machine.h -r1.9
        libc/sysdeps/mips/dl-machine.h -r1.77
         - fixes cherry picked from this version
        libc/sysdeps/powepc/powerpc32/dl-machine.h -r1.13
        libc/sysdeps/powepc/powerpc64/dl-machine.h -r1.23
        libc/sysdeps/sparc/sparc64/dl-machine.h -r1.48
	libc/sysdeps/i386/dl-machine.h -r1.134 (except using RESOLVE)
Upstream Status: See Origin, all except fix_bad_pc24 fixed in glibc cvs
Description: 

2005-03-15  Jakub Jelinek  <jakub@redhat.com>

        * elf/dynamic-link.h (elf_machine_rel, elf_machine_rel_relative,
        elf_machine_rela, elf_machine_rela_relative, elf_machine_lazy_rel):
        Add inline keyword.
        * sysdeps/alpha/dl-machine.h (elf_machine_rela,
        elf_machine_rela_relative, elf_machine_lazy_rel): Add always_inline
        attribute.
        * sysdeps/sparc/sparc32/dl-machine.h (elf_machine_rela,
        elf_machine_rela_relative, elf_machine_lazy_rel): Likewise.  Change
        static inline into auto inline.
        * sysdeps/sparc/sparc64/dl-machine.h (elf_machine_rela,
        elf_machine_rela_relative, elf_machine_lazy_rel): Likewise.
        * sysdeps/generic/dl-machine.h (elf_machine_rel, elf_machine_rela):
        Likewise.
        * sysdeps/arm/dl-machine.h (elf_machine_rel, elf_machine_rel_relative,
        elf_machine_rela, elf_machine_rela_relative, elf_machine_lazy_rel):
        Likewise.

2005-03-05  Jakub Jelinek  <jakub@redhat.com>

        * sysdeps/i386/dl-machine.h (ELF_MACHINE_NO_RELA): Define
        unconditionally to (defined RTLD_BOOTSTRAP).
	* sysdeps/arm/dl-machine.h (ELF_MACHINE_NO_RELA): Likewise

2005-03-01  Roland McGrath  <roland@redhat.com>

	[BZ #721]
	* sysdeps/arm/dl-machine.h (ELF_MACHINE_NO_RELA): Define this outside
	of [RESOLVE_MAP]

2005-02-16  Roland McGrath  <roland@redhat.com>

        [BZ #721]
        * sysdeps/i386/dl-machine.h (ELF_MACHINE_NO_RELA): Define this outside
        of [RESOLVE_MAP].
        * sysdeps/sh/dl-machine.h (ELF_MACHINE_NO_REL): Likewise.
        * sysdeps/powerpc/powerpc32/dl-machine.h
        (elf_machine_rel, elf_machine_rel_relative): Removed.
        * sysdeps/powerpc/powerpc64/dl-machine.h
        (elf_machine_rel, elf_machine_rel_relative): Removed.

2005-02-14  Alan Modra  <amodra@bigpond.net.au>

        * sysdeps/powerpc/powerpc32/dl-machine.h (elf_machine_rela): Define
        with auto inline, and attribute always_inline.
        (elf_machine_rela_relative, elf_machine_lazy_rel): Likewise.
        (elf_machine_rel, elf_machine_rel_relative): Likewise.
        * sysdeps/powerpc/powerpc64/dl-machine.h (elf_machine_rela): Likewise.
        (elf_machine_rela_relative, elf_machine_lazy_rel): Likewise.
        (elf_machine_rel, elf_machine_rel_relative): Likewise.
        (elf_machine_tprel): Likewise.

2005-02-03  Alexandre Oliva  <aoliva@redhat.com>

        [BZ #721]
        * elf/dynamic-link.h: Don't declare nested auto functions that are
        not going to be defined.

===================================================================
RCS file: /cvs/glibc/libc/elf/dynamic-link.h,v
retrieving revision 1.51
retrieving revision 1.54
diff -u -r1.51 -r1.54
--- libc/elf/dynamic-link.h	2004/09/24 17:09:03	1.51
+++ libc/elf/dynamic-link.h	2005/03/15 22:57:25	1.54
@@ -1,5 +1,5 @@
 /* Inline functions for dynamic linking.
-   Copyright (C) 1995-2002, 2003, 2004 Free Software Foundation, Inc.
+   Copyright (C) 1995-2002, 2003, 2004, 2005 Free Software Foundation, Inc.
    This file is part of the GNU C Library.
 
    The GNU C Library is free software; you can redistribute it and/or
@@ -31,26 +31,30 @@
    optimizing away alignment tests or using word instructions for
    copying memory, breaking the very code written to handle the
    unaligned cases.  */
-auto void __attribute__((always_inline))
+# if ! ELF_MACHINE_NO_REL
+auto inline void __attribute__((always_inline))
 elf_machine_rel (struct link_map *map, const ElfW(Rel) *reloc,
 		 const ElfW(Sym) *sym, const struct r_found_version *version,
 		 void *const reloc_addr);
-auto void __attribute__((always_inline))
+auto inline void __attribute__((always_inline))
+elf_machine_rel_relative (ElfW(Addr) l_addr, const ElfW(Rel) *reloc,
+			  void *const reloc_addr);
+# endif
+# if ! ELF_MACHINE_NO_RELA
+auto inline void __attribute__((always_inline))
 elf_machine_rela (struct link_map *map, const ElfW(Rela) *reloc,
 		  const ElfW(Sym) *sym, const struct r_found_version *version,
 		  void *const reloc_addr);
-auto void __attribute__((always_inline))
-elf_machine_rel_relative (ElfW(Addr) l_addr, const ElfW(Rel) *reloc,
-			  void *const reloc_addr);
-auto void __attribute__((always_inline))
+auto inline void __attribute__((always_inline))
 elf_machine_rela_relative (ElfW(Addr) l_addr, const ElfW(Rela) *reloc,
 			   void *const reloc_addr);
+# endif
 # if ELF_MACHINE_NO_RELA || defined ELF_MACHINE_PLT_REL
-auto void __attribute__((always_inline))
+auto inline void __attribute__((always_inline))
 elf_machine_lazy_rel (struct link_map *map,
 		      ElfW(Addr) l_addr, const ElfW(Rel) *reloc);
 # else
-auto void __attribute__((always_inline))
+auto inline void __attribute__((always_inline))
 elf_machine_lazy_rel (struct link_map *map,
 		      ElfW(Addr) l_addr, const ElfW(Rela) *reloc);
 # endif
===================================================================
RCS file: /cvs/glibc/libc/sysdeps/alpha/dl-machine.h,v
retrieving revision 1.80
retrieving revision 1.81
diff -u -r1.80 -r1.81
--- libc/sysdeps/alpha/dl-machine.h	2005/02/07 03:11:46	1.80
+++ libc/sysdeps/alpha/dl-machine.h	2005/03/15 22:57:26	1.81
@@ -1,5 +1,5 @@
 /* Machine-dependent ELF dynamic relocation inline functions.  Alpha version.
-   Copyright (C) 1996-2002, 2003, 2004 Free Software Foundation, Inc.
+   Copyright (C) 1996-2002, 2003, 2004, 2005 Free Software Foundation, Inc.
    This file is part of the GNU C Library.
    Contributed by Richard Henderson <rth@tamu.edu>.
 
@@ -376,6 +376,7 @@
 /* Perform the relocation specified by RELOC and SYM (which is fully resolved).
    MAP is the object containing the reloc.  */
 auto inline void
+__attribute__ ((always_inline))
 elf_machine_rela (struct link_map *map,
 		  const Elf64_Rela *reloc,
 		  const Elf64_Sym *sym,
@@ -504,6 +505,7 @@
 #define ELF_MACHINE_REL_RELATIVE 1
 
 auto inline void
+__attribute__ ((always_inline))
 elf_machine_rela_relative (Elf64_Addr l_addr, const Elf64_Rela *reloc,
 			   void *const reloc_addr_arg)
 {
@@ -520,6 +522,7 @@
 }
 
 auto inline void
+__attribute__ ((always_inline))
 elf_machine_lazy_rel (struct link_map *map,
 		      Elf64_Addr l_addr, const Elf64_Rela *reloc)
 {
--- glibc-2.3.4/sysdeps/arm/dl-machine.h-orig	2004-12-05 08:20:17.000000000 +1100
+++ glibc-2.3.4/sysdeps/arm/dl-machine.h	2005-06-03 15:33:44.000000000 +1000
@@ -350,16 +350,15 @@
 
 #endif /* !dl_machine_h */
 
-#ifdef RESOLVE
-
 /* ARM never uses Elf32_Rela relocations for the dynamic linker.
    Prelinked libraries may use Elf32_Rela though.  */
-# ifdef RTLD_BOOTSTRAP
-#  define ELF_MACHINE_NO_RELA 1
-# endif
+#define ELF_MACHINE_NO_RELA defined RTLD_BOOTSTRAP
+
+#ifdef RESOLVE
 
 /* Deal with an out-of-range PC24 reloc.  */
-static Elf32_Addr
+auto inline Elf32_Addr
+__attribute__ ((always_inline))
 fix_bad_pc24 (Elf32_Addr *const reloc_addr, Elf32_Addr value)
 {
   static void *fix_page;
@@ -392,7 +391,8 @@
 /* Perform the relocation specified by RELOC and SYM (which is fully resolved).
    MAP is the object containing the reloc.  */
 
-static inline void
+auto inline void
+__attribute__ ((always_inline))
 elf_machine_rel (struct link_map *map, const Elf32_Rel *reloc,
 		 const Elf32_Sym *sym, const struct r_found_version *version,
 		 void *const reloc_addr_arg)
@@ -517,7 +517,8 @@
 }
 
 # ifndef RTLD_BOOTSTRAP
-static inline void
+auto inline void
+__attribute__ ((always_inline))
 elf_machine_rela (struct link_map *map, const Elf32_Rela *reloc,
 		  const Elf32_Sym *sym, const struct r_found_version *version,
 		  void *const reloc_addr_arg)
@@ -597,7 +598,8 @@
 }
 # endif
 
-static inline void
+auto inline void
+__attribute__ ((always_inline))
 elf_machine_rel_relative (Elf32_Addr l_addr, const Elf32_Rel *reloc,
 			  void *const reloc_addr_arg)
 {
@@ -606,7 +608,8 @@
 }
 
 # ifndef RTLD_BOOTSTRAP
-static inline void
+auto inline void
+__attribute__ ((always_inline))
 elf_machine_rela_relative (Elf32_Addr l_addr, const Elf32_Rela *reloc,
 			   void *const reloc_addr_arg)
 {
@@ -615,7 +618,8 @@
 }
 # endif
 
-static inline void
+auto inline void
+__attribute__ ((always_inline))
 elf_machine_lazy_rel (struct link_map *map,
 		      Elf32_Addr l_addr, const Elf32_Rel *reloc)
 {
===================================================================
RCS file: /cvs/glibc/libc/sysdeps/generic/dl-machine.h,v
retrieving revision 1.8
retrieving revision 1.9
diff -u -r1.8 -r1.9
--- libc/sysdeps/generic/dl-machine.h	2001/09/08 17:16:43	1.8
+++ libc/sysdeps/generic/dl-machine.h	2005/03/15 22:57:24	1.9
@@ -1,5 +1,6 @@
 /* Machine-dependent ELF dynamic relocation inline functions.  Stub version.
-   Copyright (C) 1995,1996,1997,1999,2000,2001 Free Software Foundation, Inc.
+   Copyright (C) 1995, 1996, 1997, 1999, 2000, 2001, 2005
+   Free Software Foundation, Inc.
    This file is part of the GNU C Library.
 
    The GNU C Library is free software; you can redistribute it and/or
@@ -64,7 +65,8 @@
    LOADADDR is the load address of the object; INFO is an array indexed
    by DT_* of the .dynamic section info.  */
 
-static inline void
+auto inline void
+__attribute__ ((always_inline))
 elf_machine_rel (Elf32_Addr loadaddr, Elf32_Dyn *info[DT_NUM],
 		 const Elf32_Rel *reloc, const Elf32_Sym *sym,
 		 Elf32_Addr (*resolve) (const Elf32_Sym **ref,
@@ -87,7 +89,8 @@
 }
 
 
-static inline Elf32_Addr
+auto inline Elf32_Addr
+__attribute__ ((always_inline))
 elf_machine_rela (Elf32_Addr loadaddr, Elf32_Dyn *info[DT_NUM],
 		  const Elf32_Rel *reloc, const Elf32_Sym *sym,
 		  Elf32_Addr (*resolve) (const Elf32_Sym **ref,
--- glibc-2.3.4/sysdeps/mips/dl-machine.h-orig	2004-11-24 15:36:09.000000000 +1100
+++ glibc-2.3.4/sysdeps/mips/dl-machine.h	2005-05-05 01:39:11.000000000 +1000
@@ -528,7 +528,7 @@
 /* Perform the relocation specified by RELOC and SYM (which is fully resolved).
    MAP is the object containing the reloc.  */
 
-static inline void
+auto inline void
 #ifdef RTLD_BOOTSTRAP
   __attribute__ ((always_inline))
 #endif
@@ -635,14 +635,16 @@
     }
 }
 
-static inline void
+auto inline void
+__attribute__((always_inline))
 elf_machine_rel_relative (ElfW(Addr) l_addr, const ElfW(Rel) *reloc,
 			  void *const reloc_addr)
 {
   /* XXX Nothing to do.  There is no relative relocation, right?  */
 }
 
-static inline void
+auto inline void
+__attribute__((always_inline))
 elf_machine_lazy_rel (struct link_map *map,
 		      ElfW(Addr) l_addr, const ElfW(Rel) *reloc)
 {
@@ -651,7 +653,8 @@
 
 #ifndef RTLD_BOOTSTRAP
 /* Relocate GOT. */
-static inline void
+auto inline void
+__attribute__((always_inline))
 elf_machine_got_rel (struct link_map *map, int lazy)
 {
   ElfW(Addr) *got;
@@ -738,7 +741,8 @@
 /* Set up the loaded object described by L so its stub function
    will jump to the on-demand fixup code __dl_runtime_resolve.  */
 
-static inline int
+auto inline int
+__attribute__((always_inline))
 elf_machine_runtime_setup (struct link_map *l, int lazy, int profile)
 {
 # ifndef RTLD_BOOTSTRAP
===================================================================
RCS file: /cvs/glibc/libc/sysdeps/powerpc/powerpc32/dl-machine.h,v
retrieving revision 1.11
retrieving revision 1.13
diff -u -r1.11 -r1.13
--- libc/sysdeps/powerpc/powerpc32/dl-machine.h	2005/01/25 10:42:04	1.11
+++ libc/sysdeps/powerpc/powerpc32/dl-machine.h	2005/02/17 01:16:34	1.13
@@ -204,7 +204,7 @@
    LOADADDR is the load address of the object; INFO is an array indexed
    by DT_* of the .dynamic section info.  */
 
-inline void
+auto inline void __attribute__ ((always_inline))
 elf_machine_rela (struct link_map *map, const Elf32_Rela *reloc,
 		  const Elf32_Sym *sym, const struct r_found_version *version,
 		  void *const reloc_addr_arg)
@@ -298,7 +298,7 @@
     }
 }
 
-static inline void
+auto inline void __attribute__ ((always_inline))
 elf_machine_rela_relative (Elf32_Addr l_addr, const Elf32_Rela *reloc,
 			   void *const reloc_addr_arg)
 {
@@ -306,7 +306,7 @@
   *reloc_addr = l_addr + reloc->r_addend;
 }
 
-static inline void
+auto inline void __attribute__ ((always_inline))
 elf_machine_lazy_rel (struct link_map *map,
 		      Elf32_Addr l_addr, const Elf32_Rela *reloc)
 {
===================================================================
RCS file: /cvs/glibc/libc/sysdeps/powerpc/powerpc64/dl-machine.h,v
retrieving revision 1.21
retrieving revision 1.23
diff -u -r1.21 -r1.23
--- libc/sysdeps/powerpc/powerpc64/dl-machine.h	2005/01/08 07:07:01	1.21
+++ libc/sysdeps/powerpc/powerpc64/dl-machine.h	2005/02/17 01:16:34	1.23
@@ -487,7 +487,7 @@
                                 const Elf64_Sym *refsym)
                                 attribute_hidden;
 
-static inline void
+auto inline void __attribute__ ((always_inline))
 elf_machine_rela_relative (Elf64_Addr l_addr, const Elf64_Rela *reloc,
 			   void *const reloc_addr_arg)
 {
@@ -497,7 +497,7 @@
 
 #if defined USE_TLS && (!defined RTLD_BOOTSTRAP || USE___THREAD)
 /* This computes the value used by TPREL* relocs.  */
-static Elf64_Addr __attribute__ ((const))
+auto inline Elf64_Addr __attribute__ ((always_inline, const))
 elf_machine_tprel (struct link_map *map,
 		   struct link_map *sym_map,
 		   const Elf64_Sym *sym,
@@ -518,7 +518,7 @@
 
 /* Perform the relocation specified by RELOC and SYM (which is fully
    resolved).  MAP is the object containing the reloc.  */
-static inline void
+auto inline void __attribute__ ((always_inline))
 elf_machine_rela (struct link_map *map,
 		  const Elf64_Rela *reloc,
 		  const Elf64_Sym *sym,
@@ -803,11 +803,12 @@
   MODIFIED_CODE_NOQUEUE (reloc_addr);
 }
 
-static inline void
+auto inline void __attribute__ ((always_inline))
 elf_machine_lazy_rel (struct link_map *map,
 		      Elf64_Addr l_addr, const Elf64_Rela *reloc)
 {
   /* elf_machine_runtime_setup handles this.  */
 }
 
+
 #endif /* RESOLVE */
===================================================================
RCS file: /cvs/glibc/libc/sysdeps/sparc/sparc32/dl-machine.h,v
retrieving revision 1.53
retrieving revision 1.54
diff -u -r1.53 -r1.54
--- libc/sysdeps/sparc/sparc32/dl-machine.h	2004/05/17 18:20:30	1.53
+++ libc/sysdeps/sparc/sparc32/dl-machine.h	2005/03/15 22:57:24	1.54
@@ -1,5 +1,5 @@
 /* Machine-dependent ELF dynamic relocation inline functions.  SPARC version.
-   Copyright (C) 1996-2003, 2004 Free Software Foundation, Inc.
+   Copyright (C) 1996-2003, 2004, 2005 Free Software Foundation, Inc.
    This file is part of the GNU C Library.
 
    The GNU C Library is free software; you can redistribute it and/or
@@ -411,7 +411,8 @@
 /* Perform the relocation specified by RELOC and SYM (which is fully resolved).
    MAP is the object containing the reloc.  */
 
-static inline void
+auto inline void
+__attribute__ ((always_inline))
 elf_machine_rela (struct link_map *map, const Elf32_Rela *reloc,
 		  const Elf32_Sym *sym, const struct r_found_version *version,
 		  void *const reloc_addr_arg)
@@ -593,7 +594,8 @@
     }
 }
 
-static inline void
+auto inline void
+__attribute__ ((always_inline))
 elf_machine_rela_relative (Elf32_Addr l_addr, const Elf32_Rela *reloc,
 			   void *const reloc_addr_arg)
 {
@@ -601,7 +603,8 @@
   *reloc_addr += l_addr + reloc->r_addend;
 }
 
-static inline void
+auto inline void
+__attribute__ ((always_inline))
 elf_machine_lazy_rel (struct link_map *map,
 		      Elf32_Addr l_addr, const Elf32_Rela *reloc)
 {
===================================================================
RCS file: /cvs/glibc/libc/sysdeps/sparc/sparc64/dl-machine.h,v
retrieving revision 1.47
retrieving revision 1.48
diff -u -r1.47 -r1.48
--- libc/sysdeps/sparc/sparc64/dl-machine.h	2004/03/05 10:27:55	1.47
+++ libc/sysdeps/sparc/sparc64/dl-machine.h	2005/03/15 22:57:26	1.48
@@ -1,5 +1,5 @@
 /* Machine-dependent ELF dynamic relocation inline functions.  Sparc64 version.
-   Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004
+   Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005
 	Free Software Foundation, Inc.
    This file is part of the GNU C Library.
 
@@ -238,7 +238,8 @@
 /* Perform the relocation specified by RELOC and SYM (which is fully resolved).
    MAP is the object containing the reloc.  */
 
-static inline void
+auto inline void
+__attribute__ ((always_inline))
 elf_machine_rela (struct link_map *map, const Elf64_Rela *reloc,
 		  const Elf64_Sym *sym, const struct r_found_version *version,
 		  void *const reloc_addr_arg)
@@ -430,7 +431,8 @@
     }
 }
 
-static inline void
+auto inline void
+__attribute__ ((always_inline))
 elf_machine_rela_relative (Elf64_Addr l_addr, const Elf64_Rela *reloc,
 			   void *const reloc_addr_arg)
 {
@@ -438,7 +440,8 @@
   *reloc_addr = l_addr + reloc->r_addend;
 }
 
-static inline void
+auto inline void
+__attribute__ ((always_inline))
 elf_machine_lazy_rel (struct link_map *map,
 		      Elf64_Addr l_addr, const Elf64_Rela *reloc)
 {
--- glibc-2.3.4/sysdeps/i386/dl-machine.h-orig	2004-09-28 14:54:41.000000000 +1000
+++ glibc-2.3.4/sysdeps/i386/dl-machine.h	2005-06-02 19:28:58.000000000 +1000
@@ -377,13 +377,11 @@
 
 #endif /* !dl_machine_h */
 
-#ifdef RESOLVE
-
 /* The i386 never uses Elf32_Rela relocations for the dynamic linker.
    Prelinked libraries may use Elf32_Rela though.  */
-#ifdef RTLD_BOOTSTRAP
-# define ELF_MACHINE_NO_RELA 1
-#endif
+#define ELF_MACHINE_NO_RELA defined RTLD_BOOTSTRAP
+
+#ifdef RESOLVE
 
 /* Perform the relocation specified by RELOC and SYM (which is fully resolved).
    MAP is the object containing the reloc.  */
