Submitted By: Ryan Oliver <ryan.oliver@pha.com.au>
Date: 2005-05-03
Initial Package Version: 2.3.4
Origin: glibc cvs ( libc/elf/dynamic-link.h -r1.54 )
Upstream Status: See Origin
Description:
   http://sources.redhat.com/bugzilla/show_bug.cgi?id=721
   http://sources.redhat.com/ml/libc-hacker/2005-02/msg00000.html
   http://sources.redhat.com/ml/libc-hacker/2005-03/msg00008.html

(RO: edited changelog entries )
2005-03-15  Jakub Jelinek  <jakub@redhat.com>

        * elf/dynamic-link.h (elf_machine_rel, elf_machine_rel_relative,
        elf_machine_rela, elf_machine_rela_relative, elf_machine_lazy_rel):
        Add inline keyword.

2005-02-03  Alexandre Oliva  <aoliva@redhat.com>

        [BZ #721]
        * elf/dynamic-link.h: Don't declare nested auto functions that are
        not going to be defined.


===================================================================
RCS file: /cvs/glibc/libc/elf/dynamic-link.h,v
retrieving revision 1.51
retrieving revision 1.54
diff -u -r1.51 -r1.54
--- libc/elf/dynamic-link.h	2004/09/24 17:09:03	1.51
+++ libc/elf/dynamic-link.h	2005/03/15 22:57:25	1.54
@@ -1,5 +1,5 @@
 /* Inline functions for dynamic linking.
-   Copyright (C) 1995-2002, 2003, 2004 Free Software Foundation, Inc.
+   Copyright (C) 1995-2002, 2003, 2004, 2005 Free Software Foundation, Inc.
    This file is part of the GNU C Library.
 
    The GNU C Library is free software; you can redistribute it and/or
@@ -31,26 +31,30 @@
    optimizing away alignment tests or using word instructions for
    copying memory, breaking the very code written to handle the
    unaligned cases.  */
-auto void __attribute__((always_inline))
+# if ! ELF_MACHINE_NO_REL
+auto inline void __attribute__((always_inline))
 elf_machine_rel (struct link_map *map, const ElfW(Rel) *reloc,
 		 const ElfW(Sym) *sym, const struct r_found_version *version,
 		 void *const reloc_addr);
-auto void __attribute__((always_inline))
+auto inline void __attribute__((always_inline))
+elf_machine_rel_relative (ElfW(Addr) l_addr, const ElfW(Rel) *reloc,
+			  void *const reloc_addr);
+# endif
+# if ! ELF_MACHINE_NO_RELA
+auto inline void __attribute__((always_inline))
 elf_machine_rela (struct link_map *map, const ElfW(Rela) *reloc,
 		  const ElfW(Sym) *sym, const struct r_found_version *version,
 		  void *const reloc_addr);
-auto void __attribute__((always_inline))
-elf_machine_rel_relative (ElfW(Addr) l_addr, const ElfW(Rel) *reloc,
-			  void *const reloc_addr);
-auto void __attribute__((always_inline))
+auto inline void __attribute__((always_inline))
 elf_machine_rela_relative (ElfW(Addr) l_addr, const ElfW(Rela) *reloc,
 			   void *const reloc_addr);
+# endif
 # if ELF_MACHINE_NO_RELA || defined ELF_MACHINE_PLT_REL
-auto void __attribute__((always_inline))
+auto inline void __attribute__((always_inline))
 elf_machine_lazy_rel (struct link_map *map,
 		      ElfW(Addr) l_addr, const ElfW(Rel) *reloc);
 # else
-auto void __attribute__((always_inline))
+auto inline void __attribute__((always_inline))
 elf_machine_lazy_rel (struct link_map *map,
 		      ElfW(Addr) l_addr, const ElfW(Rela) *reloc);
 # endif
