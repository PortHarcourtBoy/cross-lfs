#!/bin/sh

# plfs-config 

# Cross-LFS Build Options 
#-----------------------------------------------
#
# Last Modified
#	By     :	$LastChangedBy$
#	Date   :	$LastChangedDate$
#	Rev No :	$LastChangedRevision$
#

#-----------------------------
# Build configuration options
#-----------------------------

# Set LFS to suit your tree.
# (ie the mountpoint where your final partition resides)
export LFS=/mnt/lfs-mips64

# Set to where you will install the tools
# that are to run on the host.
# This will include the cross compiler
export HST_TOOLS=/home/lfs

# Set this to the location where the target tools
# are to be installed
export TGT_TOOLS=/tgt-tools

# Set SRC for your sourcedir, TARBALLS for where you store
#  your tarballs

export SRC=/home/lfs/src/mips64
export TARBALLS=/mnt/tarballs
export PATCHES=/home/lfs/cross-lfs/patches
export SCRIPTS=/home/lfs/cross-lfs/scripts
export CONFIGS=/home/lfs/cross-lfs/configs

# Logging
# Set for base of logging tree
export LOGS=/home/lfs/logs/mips64

export CONFLOGS=${LOGS}/conflogs
export BUILDLOGS=${LOGS}/buildlogs
export INSTLOGS=${LOGS}/instlogs
export TESTLOGS=${LOGS}/testlogs

# Set your timezone and locale
export TZ="Australia/Melbourne"
export LC_ALL="en_AU"

# Set your umask
umask 0022

#---------------
# Cross Options
#---------------

# set to the target architecture
export TGT_ARCH=mips64el
export TGT_CFLAGS="-mips64"
# Set to the target architectures target-triple
export TARGET=mips64el-unknown-linux-gnu

# set to the target-triple for the host we are building on
# TODO: This should be set by uname
export HOST=x86_64-pc-linux-gnu
# This most of the time will be the same as ${HOST}
export BUILD=${HOST}

# define to the default arch to place into */lib
# This is NOT necessarily the compilers default.
# Valid values are 31 (s390), 32 and 64
export LIBDIRENV=n32

# define to what you want to be the default environment for
# this system.
export DEFAULTENV=n32

#---------------
# Build Options
#---------------

# PARALLEL MAKE FLAGS
#---------------------
# Set to the desired level of parallelism.
# eg PMFLAGS="-j 4"
# If undesired, just set to an empty string.
#
export PMFLAGS="-j 3"

# KERNEL HEADERS
#----------------
# Set to "Y" to use sanitised headers for building userspace
# against. Expects linux-libc-headers
export USE_SANITISED_HEADERS=Y

# SYSROOT OPTIONS
#----------------
# Set to Y to do a sysrooted build.
# Sysroot will be ${LFS}
export USE_SYSROOT=N

# GCC
#-----
# Change the following to Y if you would like
# to build gcc without bootstrap for ch5 and 6
# shared builds ( save a few cycles :-) )
export NOBOOTSTRAP=N

# Change the following to Y if you would like
# to build the final gcc with version specific runtime libs.
export USE_VER_SPEC_RT_LIBS=Y

# Change the following to Y if you would like
# to build the final gcc with a program suffix
export USE_PROGRAM_SUFFIX=Y

# Change the following to Y if you want to use the
# Native Posix Thread Library instead of linuxthreads.
export USE_NPTL=N

# Are we building a multi-arch toolchain
export MULTIARCH=N

# MISC
#------
# enable to build readline (and build bash against readline) for
# target-native build
export USE_READLINE=Y

# enable to use hotplug
export USE_HOTPLUG=Y

# BOOTLOADERS
#-------------
# set only one of the following to "Y"
export USE_LILO=N

# DEVICES
#---------
# Choose method for handling devices.
#
# Build will default to using MAKEDEV if nothing is selected here.
#
# Set either UDEV to Y for utilising udev (2.5/2.6 kernels only)
# or DEVFS to Y for using devfs (2.4 kernels, deprecated 2.5 and 2.6)
#
export UDEV=Y
export DEVFS=N

